{"version":3,"sources":["store/types.ts","store/reducer.ts","store/store.ts","api/api.ts","store/actions.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionTypes","FilterTypes","LOAD_TODOS","SET_VISIBILITY_FILTER","LOAD_USER","CLEAR_USER","DELETE_TODO","TOGGLE_COMPLETED","initialState","todos","visibilityFilter","SHOW_ALL","currentUser","rootReducer","combineReducers","reducer","state","action","type","payload","data","filter","filteredTodos","todo","id","newTodos","map","completed","store","configureStore","API_URL","getUser","userId","a","fetch","response","json","getTodos","CurrentUser","useSelector","dispatch","useDispatch","reset","useCallback","className","name","email","phone","onClick","TodoList","useState","searchTitle","setSearchTitle","visibleFilter","visibleTodos","useMemo","title","toLowerCase","includes","SHOW_COMPLETED","SHOW_ACTIVE","handleDelete","removeTodo","handleCheckbox","toggleCompleted","selectUser","loadUser","placeholder","value","onChange","event","target","length","classNames","checked","App","useEffect","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1435d319.chunk.js","sourcesContent":["export enum ActionTypes {\n  LOAD_TODOS = 'TODOS_LOAD',\n  SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER',\n  LOAD_USER = 'LOAD_USER',\n  CLEAR_USER = 'CLEAR_USER',\n  DELETE_TODO = 'DELETE_TODO',\n  TOGGLE_COMPLETED = 'TOGGLE_COMPLETED',\n}\n\nexport enum FilterTypes {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n","import { AnyAction } from 'redux';\nimport { ActionTypes, FilterTypes } from './types';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst {\n  LOAD_TODOS,\n  SET_VISIBILITY_FILTER,\n  LOAD_USER,\n  CLEAR_USER,\n  DELETE_TODO,\n  TOGGLE_COMPLETED,\n} = ActionTypes;\n\nconst initialState = {\n  todos: [],\n  visibilityFilter: FilterTypes.SHOW_ALL,\n  currentUser: null,\n};\n\ninterface State {\n  todos: Todo[],\n  visibilityFilter: string,\n  currentUser: User | null,\n}\n\nexport const reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.payload.data,\n      };\n\n    case SET_VISIBILITY_FILTER:\n      return {\n        ...state,\n        visibilityFilter: action.payload.filter,\n      };\n\n    case DELETE_TODO:\n      return (() => {\n        const { todos } = state;\n        const filteredTodos = todos.filter(\n          todo => todo.id !== action.payload.id,\n        );\n\n        return {\n          ...state,\n          todos: filteredTodos,\n        };\n      })();\n\n    case TOGGLE_COMPLETED:\n      return (() => {\n        const { todos } = state;\n        const newTodos = todos.map(\n          todo => {\n            const item = todo.id === action.payload.id\n              ? { ...todo, completed: !todo.completed }\n              : todo;\n\n            return item;\n          },\n        );\n\n        return {\n          ...state,\n          todos: newTodos,\n        };\n      })();\n\n    case LOAD_USER:\n      return {\n        ...state,\n        currentUser: action.payload.data,\n      };\n\n    case CLEAR_USER:\n      return {\n        ...state,\n        currentUser: null,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { reducer } from './reducer';\n\nconst rootReducer = combineReducers({\n  reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","import { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}todos`);\n\n  return response.json();\n};\n","import { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\nimport { getTodos, getUser } from '../api/api';\n\nconst {\n  LOAD_TODOS,\n  LOAD_USER,\n  CLEAR_USER,\n  DELETE_TODO,\n  TOGGLE_COMPLETED,\n  SET_VISIBILITY_FILTER,\n} = ActionTypes;\n\nexport const loadTodos = () => {\n  return async (dispatch: Dispatch) => {\n    const response = await getTodos();\n\n    dispatch({\n      type: LOAD_TODOS,\n      payload: { data: response },\n    });\n  };\n};\n\nexport const setVisibileFilter = (filter: string) => {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    payload: { filter },\n  };\n};\n\nexport const toggleCompleted = (id: number) => {\n  return {\n    type: TOGGLE_COMPLETED,\n    payload: { id },\n  };\n};\n\nexport const loadUser = (id: number) => {\n  return async (dispatch: Dispatch) => {\n    const response = await getUser(id);\n\n    dispatch({\n      type: LOAD_USER,\n      payload: { data: response },\n    });\n  };\n};\n\nexport const clearUser = () => {\n  return {\n    type: CLEAR_USER,\n  };\n};\n\nexport const removeTodo = (id: number) => {\n  return {\n    type: DELETE_TODO,\n    payload: { id },\n  };\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearUser } from '../../store/actions';\nimport { RootState } from '../../store/store';\n\nimport { User } from '../../types/User';\n\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const currentUser: User | null = useSelector((state: RootState) => {\n    const { reducer } = state;\n\n    return reducer.currentUser;\n  });\n\n  const dispatch = useDispatch();\n\n  const reset = useCallback(() => {\n    dispatch(clearUser());\n  }, []);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"Current-user\">\n          <h2 className=\"CurrentUser__title\">\n            {`Selected user: ${currentUser.id}`}\n          </h2>\n\n          <h3 className=\"Current-user__name\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"Current-user__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"Current-user__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={reset}\n            className=\"Current-user__clear button\"\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport React, { ChangeEvent, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loadUser, removeTodo, setVisibileFilter, toggleCompleted,\n} from '../../store/actions';\nimport { RootState } from '../../store/store';\nimport { FilterTypes } from '../../store/types';\nimport { Todo } from '../../types/Todo';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [searchTitle, setSearchTitle] = useState('');\n\n  const todos: Todo[] = useSelector(\n    (state: RootState) => state.reducer.todos,\n  );\n\n  const visibleFilter = useSelector(\n    (state: RootState) => state.reducer.visibilityFilter,\n  );\n\n  const currentUser = useSelector(\n    (state: RootState) => state.reducer.currentUser,\n  );\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const filteredTodos = todo.title.toLowerCase().includes(searchTitle);\n\n      switch (visibleFilter) {\n        case FilterTypes.SHOW_ALL:\n          return filteredTodos;\n\n        case FilterTypes.SHOW_COMPLETED:\n          return filteredTodos && todo.completed;\n\n        case FilterTypes.SHOW_ACTIVE:\n\n          return filteredTodos && !todo.completed;\n\n        default:\n          return filteredTodos;\n      }\n    });\n  }, [visibleFilter, todos, searchTitle]);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = (id: number) => {\n    dispatch(removeTodo(id));\n  };\n\n  const handleSelectChange = (\n    event: ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(setVisibileFilter(event.target.value));\n  };\n\n  const handleInputChange = (\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    setSearchTitle(event.target.value);\n  };\n\n  const handleCheckbox = (id: number) => {\n    dispatch(toggleCompleted(id));\n  };\n\n  const selectUser = (id: number) => {\n    dispatch(loadUser(id));\n  };\n\n  return (\n    <div className=\"Todo-list\">\n      <h2>Todos:</h2>\n\n      <div className=\"Todo-list__control\">\n        <label className=\"Todo-list__filter-by-title Todo-list__input-label\">\n          <input\n            type=\"text\"\n            placeholder=\"Filter by title\"\n            className=\"Todo-list__input\"\n            value={searchTitle}\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <select\n          className=\"Todo-list__filter-by-completed Todo-list__select\"\n          value={visibleFilter}\n          onChange={handleSelectChange}\n        >\n          <option value={FilterTypes.SHOW_ALL}>All</option>\n          <option value={FilterTypes.SHOW_ACTIVE}>Active</option>\n          <option value={FilterTypes.SHOW_COMPLETED}>Completed</option>\n        </select>\n\n        <ul className=\"Todo-list__list\" data-cy=\"listOfTodos\">\n          {!!visibleTodos.length && visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'Todo-list__item',\n                { 'Todo-list__item--checked': todo.completed },\n                { 'Todo-list__item--unchecked': !todo.completed },\n              )}\n            >\n              <div className=\"Todo-list__todo\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => handleCheckbox(todo.id)}\n                  />\n                  <p className=\"Todo-list__todo-title\">{todo.title}</p>\n                </label>\n              </div>\n              <div className=\"Todo-list__buttons\">\n                {todo.userId && (\n                  <button\n                    className={classNames(\n                      'Todo-list__user-button',\n                      'Todo-list__button',\n                      {\n                        'Todo-list__user-button--selected':\n                          currentUser && currentUser.id === todo.userId,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                )}\n                <button\n                  type=\"button\"\n                  className=\"Todo-list__button button-x\"\n                  onClick={() => handleDelete(todo.id)}\n                >\n                  &times;\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { useEffect, FC } from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { RootState } from './store/store';\nimport { User } from './types/User';\nimport { loadTodos } from './store/actions';\n\nconst App: FC = () => {\n  const currentUser: User | null = useSelector(\n    (state: RootState) => state.reducer.currentUser,\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadTodos());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__user\">\n        {currentUser ? (\n          <CurrentUser />\n        ) : 'No user selected'}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}